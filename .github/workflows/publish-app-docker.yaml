name: Publish - Project To GitHub

on:
  push:
    branches:
      - main
    paths:
      - 'nodejs/**'

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      changed_projects: ${{ steps.set.outputs.changed }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Fetch base branch
        run: git fetch origin main

      - name: Get changed folders
        id: set
        run: |
          CHANGED=$(git diff --name-only origin/main | grep '^nodejs/' | cut -d'/' -f2 | sort -u | uniq)
          FOLDERS=""
          for item in $CHANGED; do
            if [ -d "nodejs/$item" ]; then
              FOLDERS="$FOLDERS $item"
            fi
          done

          if [ -z "$FOLDERS" ]; then
            echo "changed=[]" >> $GITHUB_OUTPUT
          else
            JSON=$(echo "$FOLDERS" | jq -R -s -c 'split(" ") | map(select(length > 0))')
            echo "changed=$JSON" >> $GITHUB_OUTPUT
          fi

      - name: Debug changed folders
        run: |
          echo "Detected changed folders: ${{ steps.set.outputs.changed }}"

  build-and-push:
    needs: detect-changes    
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: ${{ fromJson(needs.detect-changes.outputs.changed_projects) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract version from package.json
        id: get_version
        run: |
          VERSION=$(jq -r .version nodejs/${{ matrix.project }}/package.json)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        run: |
          IMAGE_BASE="robokingmaster/devopsstudio-${{ matrix.project }}"
          VERSION_TAG="${IMAGE_BASE}:${{ steps.get_version.outputs.version }}"
          LATEST_TAG="${IMAGE_BASE}:latest"

          docker build -t $VERSION_TAG -t $LATEST_TAG ./nodejs/${{ matrix.project }}
          docker push $VERSION_TAG
          docker push $LATEST_TAG

      # ‚úÖ Send email on success
      - name: Send Success Email
        if: success()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "‚úÖ Build Succeeded: ${{ github.workflow }} #${{ github.run_number }}"
          to: ${{ secrets.EMAIL_RECIPIENT }}
          from: ${{ secrets.EMAIL_USERNAME }}
          body: |
            üéâ The build completed successfully!
            - Workflow: ${{ github.workflow }}
            - Run Number: ${{ github.run_number }}
            - Commit: ${{ github.sha }}
            - Actor: ${{ github.actor }}
            - Logs: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

      # ‚ùå Send email on failure
      - name: Send Failure Email
        if: failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "‚ùå Build Failed: ${{ github.workflow }} #${{ github.run_number }}"
          to: ${{ secrets.EMAIL_RECIPIENT }}
          from: ${{ secrets.EMAIL_USERNAME }}
          body: |
            üö® The build has failed.
            - Workflow: ${{ github.workflow }}
            - Run Number: ${{ github.run_number }}
            - Commit: ${{ github.sha }}
            - Actor: ${{ github.actor }}
            - Logs: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
