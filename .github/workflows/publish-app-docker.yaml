name: Publish - Docker Images

on:
  pull_request:
    branches:
      - 'main'
    paths:
      - 'projects-demo/**'
    types:
      - closed
env:
  APP_ENV: devlopment
  APP_LOG_LEVEL: debug 
  REPOSITORY_NAME: robokingmaster
  REPOSITORY_SERVER: https://registry.hub.docker.com
  EMAIL_RECIPIENT: robokingmaster@gmail.com
  DOCKER_HOST: unix:///var/run/docker.sock   

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      changed_projects: ${{ steps.set.outputs.changed }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get changed project folders
        id: set
        run: |
          CHANGED=$(git diff --name-only HEAD^ HEAD |
            grep '^projects-demo/' |
            awk -F'/' '{print $3}' |
            sort -u)

          if [ -z "$CHANGED" ]; then
            echo "changed=[]" >> $GITHUB_OUTPUT
          else
            JSON=$(echo "$CHANGED" | jq -R . | jq -s . | tr -d '\n')
            echo "changed=$JSON" >> $GITHUB_OUTPUT
          fi

  build-and-test:
    needs: detect-changes
    if: needs.detect-changes.outputs.changed_projects != '[]' && github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: ${{ fromJson(needs.detect-changes.outputs.changed_projects) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Locate project information
        id: locate
        run: |
          PROJECT_PATH=$(find projects-demo -type d -name "${{ matrix.project }}" | head -n 1)
          echo "path=$PROJECT_PATH" >> $GITHUB_OUTPUT

          cd $PROJECT_PATH
          if [ -f "package.json" ]; then
            echo "project_type=nodejs" >> $GITHUB_OUTPUT
            echo "launch_database=true" >> $GITHUB_OUTPUT
            echo "project_version=$(jq -r '.version' package.json)" >> "$GITHUB_OUTPUT"
          elif [ -f "requirements.txt" ]; then
            echo "project_type=python" >> $GITHUB_OUTPUT
            echo "launch_database=false" >> $GITHUB_OUTPUT
          else
            echo "No recognizable test setup found."       
          fi

      - name: Print project veriables
        run: | 
          echo "project_path    => ${{ steps.locate.outputs.path }}"
          echo "project_type    => ${{ steps.locate.outputs.project_type }}"
          echo "launch_database => ${{ steps.locate.outputs.launch_database }}"
          echo "project_version => ${{ steps.locate.outputs.project_version }}"

      - name: Build Docker image for ${{ matrix.project }}
        run: |
          docker build -t ${{ matrix.project }}:${{ steps.locate.outputs.project_version }} ${{ steps.locate.outputs.path }}

      ## Perfoming Test Before Pushing Image
      - name: Create Docker Network
        if: ${{ steps.locate.outputs.launch_database == 'true' }}
        run: docker network create docker-network

      - name: Start PostgreSQL Container
        if: ${{ steps.locate.outputs.launch_database == 'true' }}
        env:
          POSTGRESS_DBNAME: ${{ secrets.POSTGRESS_DBNAME }}
          POSTGRESS_DBUSER: ${{ secrets.POSTGRESS_DBUSER }}
          POSTGRESS_DBPASSWORD: ${{ secrets.POSTGRESS_DBPASSWORD }}
        run: |
          docker run -d --name test-pgdb --network docker-network \
            -e POSTGRES_USER=$POSTGRESS_DBUSER \
            -e POSTGRES_PASSWORD=$POSTGRESS_DBPASSWORD \
            -e POSTGRES_DB=$POSTGRESS_DBNAME \
            -p 5432:5432 \
            postgres:16

      - name: Wait for Postgres
        if: ${{ steps.locate.outputs.launch_database == 'true' }}      
        env:
          POSTGRESS_DBNAME: ${{ secrets.POSTGRESS_DBNAME }}
          POSTGRESS_DBUSER: ${{ secrets.POSTGRESS_DBUSER }}
          POSTGRESS_DBPASSWORD: ${{ secrets.POSTGRESS_DBPASSWORD }}      
        run: |
          for i in {1..30}; do
            if docker exec test-pgdb pg_isready -U $POSTGRESS_DBUSER; then
              echo "Postgres is ready"
              break
            fi
            echo "Waiting for Postgres..."
            sleep 2
          done

      - name: Load test database with inventory schema
        if: ${{ steps.locate.outputs.launch_database == 'true' }} 
        env:
          POSTGRESS_DBNAME: ${{ secrets.POSTGRESS_DBNAME }}
          POSTGRESS_DBUSER: ${{ secrets.POSTGRESS_DBUSER }}
          POSTGRESS_DBPASSWORD: ${{ secrets.POSTGRESS_DBPASSWORD }}
        run: |
          cd ${{ steps.locate.outputs.path }}
          if [ -f "resources/database-schema/database-schema.sql" ]; then
            echo "Creating Database Schema . . ."
            docker cp ./resources/database-schema/database-schema.sql test-pgdb:/tmp/schema.sql
            docker exec test-pgdb psql -U $POSTGRESS_DBUSER -d $POSTGRESS_DBNAME -f /tmp/schema.sql
          fi       

      - name: Run NodeJs tests suites for ${{ matrix.project }}
        if: ${{ steps.locate.outputs.launch_database == 'true' && steps.locate.outputs.project_type == 'nodejs' }} 
        env:
          POSTGRESS_DBNAME: ${{ secrets.POSTGRESS_DBNAME }}
          POSTGRESS_DBUSER: ${{ secrets.POSTGRESS_DBUSER }}
          POSTGRESS_DBPASSWORD: ${{ secrets.POSTGRESS_DBPASSWORD }}
          APP_JWT_SECRET: ${{ secrets.APP_JWT_SECRET }}
          APP_DEFAULT_USER: ${{ secrets.APP_DEFAULT_USER }}
          APP_DEFAULT_PWD: ${{ secrets.APP_DEFAULT_PWD }}    
        run: |
          cd ${{ steps.locate.outputs.path }}
          docker run --rm --name app-testsuite --network docker-network \
            -e DATABASE_HOST=test-pgdb \
            -e DATABASE_PORT=5432 \
            -e POSTGRES_USER=$POSTGRESS_DBUSER \
            -e POSTGRES_PASSWORD=$POSTGRESS_DBPASSWORD \
            -e POSTGRES_DBNAME=$POSTGRESS_DBNAME \
            -e APP_ENV=$APP_ENV \
            -e APP_PORT=5000 \
            -e APP_LOG_LEVEL=$APP_LOG_LEVEL \
            -e APP_DEFAULT_USER=$APP_DEFAULT_USER \
            -e APP_DEFAULT_PWD=$APP_DEFAULT_PWD \
            -e APP_JWT_SECRET=$APP_JWT_SECRET \
            -p 5000:5000 \
            ${{ matrix.project }}:${{ steps.locate.outputs.project_version }} \
            npm test           

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Push Docker Image
        run: |
          docker tag ${{ matrix.project }}:${{ steps.locate.outputs.project_version }} ${{ env.REPOSITORY_NAME }}/${{ matrix.project }}:${{ steps.locate.outputs.project_version }}
          docker push ${{ env.REPOSITORY_NAME }}/${{ matrix.project }}:${{ steps.locate.outputs.project_version }}

      # ‚úÖ Send email on success
      - name: Send Success Email
        if: success()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "‚úÖ Build Succeeded: ${{ github.workflow }} #${{ github.run_number }}"
          to: ${{ secrets.EMAIL_RECIPIENT }}
          from: ${{ secrets.EMAIL_USERNAME }}
          body: |
            üéâ The build completed successfully!
            - ''
            - Docker Image => ${{ env.REPOSITORY_NAME }}${{ matrix.project }}:${{ steps.locate.outputs.project_version }} Now Available..
            - Workflow: ${{ github.workflow }}
            - Run Number: ${{ github.run_number }}
            - Commit: ${{ github.sha }}
            - Actor: ${{ github.actor }}
            - Logs: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

      # ‚ùå Send email on failure
      - name: Send Failure Email
        if: failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "‚ùå Build Failed: ${{ github.workflow }} #${{ github.run_number }}"
          to: ${{ secrets.EMAIL_RECIPIENT }}
          from: ${{ secrets.EMAIL_USERNAME }}
          body: |
            üö® The build has failed.
            - Workflow: ${{ github.workflow }}
            - Run Number: ${{ github.run_number }}
            - Commit: ${{ github.sha }}
            - Actor: ${{ github.actor }}
            - Logs: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

