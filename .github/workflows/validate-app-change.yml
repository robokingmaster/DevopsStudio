name: Validate Push

on:
  push:
    paths:
      - 'projects-demo/**'

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      changed_projects: ${{ steps.set.outputs.changed }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get changed project folders
        id: set
        run: |
          CHANGED=$(git diff --name-only HEAD^ HEAD |
            grep '^projects-demo/' |
            awk -F'/' '{print $3}' |
            sort -u)

          if [ -z "$CHANGED" ]; then
            echo "changed=[]" >> $GITHUB_OUTPUT
          else
            JSON=$(echo "$CHANGED" | jq -R . | jq -s . | tr -d '\n')
            echo "changed=$JSON" >> $GITHUB_OUTPUT
          fi

  build-and-test:
    needs: detect-changes
    if: needs.detect-changes.outputs.changed_projects != '[]'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: ${{ fromJson(needs.detect-changes.outputs.changed_projects) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Locate project folder
        id: locate
        run: |
          PROJECT_PATH=$(find projects-demo -type d -name "${{ matrix.project }}" | head -n 1)
          echo "path=$PROJECT_PATH" >> $GITHUB_OUTPUT

      - name: Build Docker image for ${{ matrix.project }}
        run: |
          docker build -t ${{ matrix.project }}:temp ${{ steps.locate.outputs.path }}

      ## Perfoming Test Before Pushing Image
      - name: Create Docker Network
        run: docker network create eis-network

      - name: Start PostgreSQL Container
        env:
          TEST_DBNAME: testdb
        run: |
          docker run -d --name eis-postgres --network eis-network \
            -e POSTGRES_USER=testdbuser \
            -e POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} \
            -e POSTGRES_DB=$TEST_DBNAME \
            -p 5432:5432 \
            postgres:16

      - name: Wait for Postgres
        run: |
          for i in {1..30}; do
            if docker exec eis-postgres pg_isready -U testdbuser; then
              echo "Postgres is ready"
              break
            fi
            echo "Waiting for Postgres..."
            sleep 2
          done

      - name: Load test database with inventory schema
        env:
          TEST_DBNAME: testdb      
        run: |
          cd ${{ steps.locate.outputs.path }}
          if [ -f "resources/database-schema/database-schema.sql" ]; then
            echo "Creating Database Schema . . ."
            docker cp ./resources/database-schema/eisinventory-schema.sql eis-postgres:/tmp/schema.sql
            docker exec eis-postgres psql -U testdbuser -d $TEST_DBNAME -f /tmp/schema.sql
          fi       

      - name: Run tests for ${{ matrix.project }}
        run: |
          cd ${{ steps.locate.outputs.path }}
          if [ -f "package.json" ]; then
            if grep -q '"react"' package.json; then
              npm install
              npm run test
            else
              npm install
              npm test
            fi
          elif [ -f "requirements.txt" ]; then
            pip install -r requirements.txt
            pytest
          else
            echo "No recognizable test setup found."
          fi
